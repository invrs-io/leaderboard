"""Evaluate solutions to the invrs-gym challenges and add them to the leaderboard.

Copyright (c) 2025 invrs.io LLC
"""

import glob
from typing import Dict, Tuple


def generate_challenge_summary(path: str) -> Dict[str, Tuple[int, str]]:
    """Return summary data for the challenge at the given path."""
    solutions = glob.glob(f"{path}/solutions/*")
    prefixes = ["_".join(s.split("/")[-1].split("_")[:2]) for s in solutions]

    data = {}
    for prefix in sorted(prefixes):
        if prefix not in data:
            data[prefix] = (0, "")  # count, comment
        data[prefix] = (data[prefix][0] + 1, data[prefix][1])

    with open(f"{path}/README.md") as f:
        text = f.read()

    lines = [line.strip() for line in text.split("\n") if line.strip()]

    for line in lines:
        split = line.split("`")
        if len(split) < 3:
            raise ValueError(
                f"Error in file `{path}/README.md`. Could not parse line: {line}"
            )
        prefix = "_".join(split[1].split("_")[:2])
        prefix = prefix.strip(" _*")
        if prefix not in data:
            raise ValueError(
                f"Error in file `{path}/README.md`. Prefix `{prefix}` not found "
                f"in solutions."
            )
        comment = "`".join(split[2:]).strip()
        data[prefix] = (data[prefix][0], comment)

    for prefix in data:
        if not data[prefix][1]:
            raise ValueError(
                f"Error in file `{path}/README.md`. No entry found for prefix "
                f"`{prefix}`."
            )

    return data


def generate_summary(base_path: str = "") -> str:
    """Return the content of a summary markdown file."""

    text = "# Summary of leaderboard submissions\n\n"
    text += "_Do not edit this file. It is auto-generated by `scripts/summary.py`._\n"
    text += "| Challenge | Prefix | # | Comment |\n"
    text += "|-----------|--------|---|---------|\n"

    challenge_paths = sorted(glob.glob(f"{base_path}challenges/*/"))

    for path in challenge_paths:
        data = generate_challenge_summary(path)
        challenge = path.split("/")[-2]

        for prefix, (count, comment) in data.items():
            text += f"| {challenge} | `{prefix}` | {count} | {comment} |\n"

    return text
